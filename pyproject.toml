[tool.poetry]
# Note: Various modules refer to this system as "encoded", not "cgap-portal".
name = "encoded"
version = "15.3.0"
description = "Computational Genome Analysis Platform"
authors = ["4DN-DCIC Team <support@4dnucleome.org>"]
license = "MIT"
readme = "README.rst"
homepage = "https://github.com/dbmi-bgm/cgap-portal"
repository = "https://github.com/dbmi-bgm/cgap-portal"
documentation = "https://github.com/dbmi-bgm/cgap-portal"
packages = [
  { include="encoded", from="src" }
]
classifiers = [
    # How mature is this project? Common values are
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    'Development Status :: 3 - Alpha',

    # Indicate who your project is intended for
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Framework :: Pyramid',

    # Pick your license as you wish (should match "license" above)
    'License :: OSI Approved :: MIT License',
    'Topic :: Database :: Database Engines/Servers',

    # Specify the Python versions you support here. In particular, ensure
    # that you indicate whether you support Python 2, Python 3 or both.
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]

[tool.poetry.dependencies]
python = ">=3.8.1,<3.12"
awscli = ">=1.29.62"
boto3 = "^1.28.62"
botocore = "^1.31.62"
certifi = ">=2021.5.30"
chardet = "3.0.4"
codeguru-profiler-agent = "^1.2.4"
# At least on Mac M1 if cryptography package is later than 39.x.x (i.e. 40.x.x and up)
# we get odd 'pyo3_runtime.PanicException: Python API call failed' error on import
# of cryptography.hazmat.bindings._rust in cryptography package. 2023-04-21.
cryptography = "39.0.2"
colorama = "0.3.3"
dcicpyvcf = "^3.0.0"
dcicsnovault = "^11.0.0"
dcicutils = "^8.0.0"
elasticsearch = "7.13.4"
execnet = "1.4.1"
future = ">=0.18.2,<1"
granite-suite = "0.1.11b0"  # Needs this exact vesion until Python 3.6 support is dropped. -kmp 10-Feb-2022
h5py = "^3.8.0"
humanfriendly = "^1.44.9"
hupper = "1.5"
idna = ">=2.10,<3"
isodate = ">=0.6.1,<1"
jmespath = ">=0.10.0,<1"
netaddr = ">=0.8.0,<1"
negspy = "0.2.24"
numpy = "^1.24.2"  # negspy needs it
openpyxl = "^3.0.7,!=3.0.8"  # a version 3.0.8 appeared but then got withdrawn, for now just pin 3.0.7. try again later.
passlib = "^1.7.4"
PasteDeploy = "1.5.2"
pbkdf2 = "1.3"
plaster = "1.0"
plaster-pastedeploy = "0.6"
psutil = "^5.9.0"
psycopg2-binary = "^2.9.3"
psycopg2 = "^2.9.6"
py = ">=1.10.0"  # used by pytest, not sure if elsewhere
pyasn1 = "0.1.9"
PyBrowserID = "^0.14.0"
pycparser = "2.14"
PyJWT = "^2.6.0"
pyparsing = "^3.0.7"
pyramid = "1.10.4"
pyramid-multiauth = ">=0.9.0,<1"
pyramid-retry = "^1.0"
pyramid-tm = "^2.4"
pyramid_translogger = "^0.1"
python-dateutil = "^2.8.2"
# python-magic is presently pinned to 0.4.15 in lockstep with dcicsnovault's requirements. See explanation there.
python_magic = ">=0.4.24,<1"
pytz = ">=2021.3"
PyYAML = "^6.0.1"
rdflib = "^4.2.2"
rdflib-jsonld = ">=0.5.0,<1.0.0"
# repoze.debug is needed to use pyramid.pserve - Will Feb 17 2022
"repoze.debug" = ">=1.0.2"
requests = "^2.23.0"
rfc3986 = "^1.4.0"
rsa = "3.3"
rutter = ">=0.3,<1"
# We don't use this directly. It's part of boto3. It slows down solving to pin.
# s3transfer = ">=0.3.7,<0.4.0"
sentry-sdk = "^1.5.6"
simplejson = "^3.17.0"
SPARQLWrapper = "^1.8.5"
SQLAlchemy = "1.4.41"
structlog = ">=19.2.0,<20"
#submit4dn = "0.9.7"
subprocess-middleware = "^0.3.0"
supervisor = "^4.2.4"
# Useful for picking apart pyproject.toml
toml = ">=0.10.1,<1"
tqdm = "^4.59.0"
transaction = "^3.0.0"
translationstring = "1.3"
uptime = ">=3.0.1,<4"
urllib3 = "^1.26.4"
venusian = "^1.2.0"
waitress = "^2.1.1"
WebOb = "^1.8.7"
WebTest = "^2.0.35"
WSGIProxy2 = "0.4.2"
"zope.deprecation" = "^4.4.0"
"zope.interface" = ">=4.7.2,<6"
"zope.sqlalchemy" = "1.6"

[tool.poetry.dev-dependencies]
# PyCharm says boto3-stubs contains useful type hints
boto3-stubs = "^1.28.62"
botocore-stubs = "^1.31.62"
coverage = ">=6.2"
codacy-coverage = ">=1.3.11"
coveralls = ">=3.3.1"
docutils = ">=0.16,<1"
flake8 = ">=3.9.0"
flaky = ">=3.7.0"
# flask only for moto[server]
flask = ">=2.0.3"
# Upon removal of moto[server] we seem to be able to tolerate newer moto versions
moto = "4.0.3"
pip-licenses = "^3.3.1"
pipdeptree = "^2.1.0"
pytest = ">=7.2.1"
pytest-cov = ">=4.0.0"  # ">=2.9.0"
pytest-instafail = ">=0.4.2"
pytest-mock = ">=3.10.0"  # ">=3.2.0"
pytest-timeout = ">=2.1.0"  # ">=1.4.2"
pytest-xdist = "3.1.0"  # ">=1.34.0"
wheel = ">=0.29.0"


# TODO: Now that we're above pytest 6.0, we can use this instead of a separate pytest.ini configuration.
# -kmp 18-Jan-2021
#
# [tool.pytest.ini_options]
# minversion = "6.0"
# ...etc.
# See details at https://pytest.org/en/stable/customize.html

[tool.poetry.scripts]
# dcicutils commands
add-image-tag = "dcicutils.ecr_scripts:add_image_tag_main"
show-global-env-bucket = "dcicutils.env_scripts:show_global_env_bucket_main"
show-image-manifest = "dcicutils.ecr_scripts:show_image_manifest_main"
show-image-catalog = "dcicutils.ecr_scripts:show_image_catalog_main"
unrelease-most-recent-image = "dcicutils.ecr_scripts:unrelease_most_recent_image_main"
# snovault commands
batchupgrade = "snovault.batchupgrade:main"
create-mapping = "snovault.elasticsearch.create_mapping:main"
wipe-test-indices = "snovault.commands.wipe_test_indices:main"
# encoded commands
add-date-created = "encoded.commands.add_date_created:main"
check-rendering = "encoded.commands.check_rendering:main"
clear-db-es-contents = "encoded.commands.clear_db_es_contents:main"
configure-kibana-index = "encoded.commands.configure_kibana_index:main"
create-mapping-on-deploy = "encoded.commands.create_mapping_on_deploy:main"
dev-servers = "encoded.dev_servers:main"
dis2pheno = "encoded.commands.parse_hpoa:main"
es-index-data = "snovault.commands.es_index_data:main"
export-data = "encoded.commands.export_data:main"
extract-test-data = "encoded.commands.extract_test_data:main"
generate-local-access-key = "snovault.commands.generate_local_access_key:main"
import-data = "encoded.commands.import_data:main"
jsonld-rdf = "encoded.commands.jsonld_rdf:main"
load-access-keys = "encoded.commands.load_access_keys:main"
load-data = "encoded.commands.load_data:main"
load-data-by-type = "encoded.commands.load_data_by_type:main"
load-items = "encoded.commands.load_items:main"
make-submission-access-key = "encoded.commands.make_submission_access_key:main"
migrate-attachments-aws = "encoded.commands.migrate_attachments_aws:main"
migrate-dataset-type = "encoded.commands.migrate_dataset_type:main"
migrate-files-aws = "encoded.commands.migrate_files_aws:main"
owl-to-items = "encoded.commands.generate_items_from_owl:main"
order-schema-columns-and-facets = "encoded.commands.order_schema_columns_and_facets:main"
profiler = "encoded.commands.profiler:main"
prepare-docker = "encoded.commands.prepare_template:prepare_docker_main"
prepare-local-dev = "encoded.commands.prepare_template:prepare_local_dev_main"
publish-to-pypi = "dcicutils.scripts.publish_to_pypi:main"
purge-item-type = "encoded.commands.purge_item_type:main"
run-upgrade-on-inserts = "encoded.commands.run_upgrader_on_inserts:main"
spreadsheet-to-json = "encoded.commands.spreadsheet_to_json:main"
submission-test = "encoded.commands.submission_test:main"
# Use the same-named script in SubmitCGAP instead.
# submit-metadata-bundle = "encoded.commands.submit_metadata_bundle:main"
update-inserts-from-server = "encoded.commands.update_inserts_from_server:main"
verify-item = "encoded.commands.verify_item:main"
view-local-object= "snovault.commands.view_local_object:main"
# cgap-specific commands
clear-variants-and-genes = "encoded.commands.clear_variants_and_genes:main"
gene-table-intake = "encoded.commands.gene_table_intake:main"
ingest-vcf = "encoded.commands.ingest_vcf:main"
#ingestion-listener = "encoded.ingestion.ingestion_listener:main"
ingestion-listener = "snovault.ingestion.ingestion_listener:main"
reformat-vcf = "encoded.commands.reformat_vcf:main"
variant-table-intake = "encoded.commands.variant_table_intake:main"

# container commands
simulate-environment = "encoded.commands.simulate_environment:main"

[paste.app_factory]
main = "encoded:main"

[paste.composite_factory]
indexer = "snovault.elasticsearch.es_index_listener:composite"
ingester = "encoded.ingestion_listener:composite"

[paste.filter_app_factory]
memlimit = "encoded.memlimit:filter_app"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
